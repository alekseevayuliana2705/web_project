import vk_api
from vk_api import VkUpload
from vk_api.longpoll import VkLongPoll, VkEventType
import random

from io import BytesIO

import requests
from PIL import Image

TOKEN = 'ab56ad13c4e0593b3d0082e8d03d23bbf694699acb56124e4b2ca6389c6b129bde1d40e52852d315f10a9'
vk = vk_api.VkApi(token=TOKEN)
longpoll = VkLongPoll(vk)
upload = VkUpload(vk)


def send_message(chat_id, text):
    random_id = random.randint(0, 10000000)
    vk.method('messages.send', {'chat_id': chat_id, 'message': text,
                                'random_id': random_id})


def send_message_2(chat_id, text):
    random_id = random.randint(0, 10000000)
    vk.method('messages.send', {'chat_id': chat_id, 'message': text,
                                'random_id': random_id, 'attachment': ','.join(attachment)})


def adress(msg):
    adr = msg.strip()
    toponym_to_find = "".join(adr)

    geocoder_api_server = "http://geocode-maps.yandex.ru/1.x/"

    geocoder_params = {
        "apikey": "40d1649f-0493-4b70-98ba-98533de7710b",
        "geocode": toponym_to_find,
        "format": "json"}

    response = requests.get(geocoder_api_server, params=geocoder_params)

    if not response:
        pass

    json_response = response.json()
    toponym = json_response["response"]["GeoObjectCollection"][
        "featureMember"][0]["GeoObject"]
    toponym_coodrinates = toponym["Point"]["pos"]
    toponym_longitude, toponym_lattitude = toponym_coodrinates.split(" ")

    delta = "0.005"
    map_params = {
        "ll": ",".join([toponym_longitude, toponym_lattitude]),
        "spn": ",".join([delta, delta]),
        "l": "map"
    }

    map_api_server = "http://static-maps.yandex.ru/1.x/"
    response = requests.get(map_api_server, params=map_params)

    i = Image.open(BytesIO(
        response.content))
    i.convert("RGB").save("map.jpg")


def send_message_3(chat_id, text):
    templates = {
        "type": "carousel",
        "elements": [{
            "photo_id": "-109837093_457242811",
            "action": {
                "type": "open_photo"
            },
            "buttons": [{
                "action": {
                    "type": "text",
                    "label": "–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ üåö",
                    "payload": "{}"
                }
            }]
        },
            {
                "photo_id": "-109837093_457242811",
                "action": {
                    "type": "open_photo"
                },
                "buttons": [{
                    "action": {
                        "type": "text",
                        "label": "–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ 2",
                        "payload": "{}"
                    }
                }]
            },
            {
                "photo_id": "-109837093_457242811",
                "action": {
                    "type": "open_photo"
                },
                "buttons": [{
                    "action": {
                        "type": "text",
                        "label": "–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ 3",
                        "payload": "{}"
                    }
                }]
            }
        ]
    }
    random_id = random.randint(0, 10000000)
    vk.method('messages.send', {'chat_id': chat_id, 'message': text, 'template': templates, 'random_id': random_id})


for event in longpoll.listen():
    if event.type == VkEventType.MESSAGE_NEW:
        if event.to_me:
            if event.from_chat:
                msg = event.text
                chat_id = event.chat_id
                hello_words = ['–ü—Ä–∏–≤–µ—Ç', '–ø—Ä–∏–≤–µ—Ç', '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ', '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ', 'hello', 'Hello']
                good_bye = ['–ü–æ–∫–∞', '–ø–æ–∫–∞', '–î–æ —Å–≤–∏–¥–∞–Ω–∏—è', '–¥–æ —Å–≤–∏–¥–∞–Ω–∏—è', 'good bye', 'Good bye']

                flag_1 = False
                for g in range(len(hello_words)):
                    if hello_words[g] in msg:
                        flag_1 = True

                flag_2 = False
                for i in range(len(good_bye)):
                    if good_bye[i] in msg:
                        flag_2 = True

                if 'adress' in msg:
                    adress(msg[7:])
                    attachment = []
                    image = "C:/WEB_PROJECT/map.jpg"
                    upload_image = upload.photo_messages(photos=image)[0]
                    attachment.append('photo{}_{}'.format(upload_image['owner_id'], upload_image['id']))
                    send_message_2(chat_id, '–ú—ã –ø–æ–ª—É—á–∏–ª–∏ –∫–∞—Ä—Ç—É –≤–∞—à–µ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è:')
                elif flag_1 == True:
                    send_message(chat_id, '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –º—ã —Ä–∞–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –í–∞—Å! –ù–∞–ø–∏—Å–∞–≤ "adress:" –∏ '
                                          '—É–∫–∞–∑–∞–≤ –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å –≤–∞—à–µ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è, –≤—ã —Å–º–æ–∂–µ—Ç–µ —É–≤–∏–¥–µ—Ç—å '
                                          '–∫–∞—Ä—Ç—É –º–µ—Å—Ç–Ω–æ—Å—Ç–∏, –≥–¥–µ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å.')
                elif flag_2 == True:
                    send_message(chat_id, '–°–ø–∞—Å–∏–±–æ –∑–∞ –í–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–∏—à–∏—Ç–µ –Ω–∞–º –µ—â–µ!')
                else:
                    msg = '–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –í —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –º—ã –Ω–∞ –Ω–µ–≥–æ –æ—Ç–≤–µ—Ç–∏–º!'
                    send_message(chat_id, msg)
